"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = __importDefault(require("../constants"));
const chalk_1 = __importDefault(require("chalk"));
const LOG_TYPES = constants_1.default.LOG_TYPES;
const KNOWN_TYPES = Object.values(constants_1.default.LOG_TYPES);
const LOG_SYMBOLS = (() => {
    if (process.platform !== 'win32' || process.env.CI || process.env.TERM === 'xterm-256color') {
        return {
            error: '✘',
            warning: '❖',
            success: '✔',
            info: '✱',
            debug: '⚈',
            route: '➟'
        };
    }
    else {
        return {
            error: 'x',
            warning: '!',
            success: '+',
            info: 'i',
            debug: '%',
            route: '~'
        };
    }
})();
const BOLD_COLORS = ['red', 'yellow'];
const TYPE_COMPUTE = {
    [LOG_TYPES.PLUGIN_LOG_TYPE]: () => ({
        color: 'white',
        icon: '-',
    }),
    [LOG_TYPES.BROWSER_CONSOLE_WARN]: () => ({
        color: 'yellow',
        icon: LOG_SYMBOLS.warning,
    }),
    [LOG_TYPES.BROWSER_CONSOLE_ERROR]: () => ({
        color: 'red',
        icon: LOG_SYMBOLS.warning,
    }),
    [LOG_TYPES.BROWSER_CONSOLE_DEBUG]: () => ({
        color: 'blue',
        icon: LOG_SYMBOLS.debug,
    }),
    [LOG_TYPES.BROWSER_CONSOLE_LOG]: () => ({
        color: 'white',
        icon: LOG_SYMBOLS.info,
    }),
    [LOG_TYPES.BROWSER_CONSOLE_INFO]: () => ({
        color: 'white',
        icon: LOG_SYMBOLS.info,
    }),
    [LOG_TYPES.CYPRESS_LOG]: () => ({
        color: 'green',
        icon: LOG_SYMBOLS.info,
    }),
    [LOG_TYPES.CYPRESS_XHR]: (options) => ({
        color: 'green',
        icon: LOG_SYMBOLS.route,
        trim: options.routeTrimLength || 5000,
    }),
    [LOG_TYPES.CYPRESS_FETCH]: (options) => ({
        color: 'green',
        icon: LOG_SYMBOLS.route,
        trim: options.routeTrimLength || 5000,
    }),
    [LOG_TYPES.CYPRESS_INTERCEPT]: (options) => ({
        color: 'green',
        icon: LOG_SYMBOLS.route,
        trim: options.routeTrimLength || 5000,
    }),
    [LOG_TYPES.CYPRESS_REQUEST]: (options) => ({
        color: 'green',
        icon: LOG_SYMBOLS.success,
        trim: options.routeTrimLength || 5000,
    }),
    [LOG_TYPES.CYPRESS_COMMAND]: (options) => ({
        color: 'green',
        icon: LOG_SYMBOLS.success,
        trim: options.routeTrimLength || 5000,
    }),
};
const TYPE_STRING_CACHE = {};
const padType = (type, padding) => ' '.repeat(Math.max(padding.length - type.length - 4, 0)) + type + ' ';
const getTypeString = (type, icon, color, padding) => {
    const key = `${type}:${icon}:${color}:${padding}`;
    if (TYPE_STRING_CACHE[key]) {
        return TYPE_STRING_CACHE[key];
    }
    const typeString = KNOWN_TYPES.includes(type) ? padType(type, padding) : padType('[unknown]', padding);
    const coloredTypeString = BOLD_COLORS.includes(color) ?
        chalk_1.default[color].bold(typeString + icon + ' ') :
        chalk_1.default[color](typeString + icon + ' ');
    TYPE_STRING_CACHE[key] = coloredTypeString;
    return coloredTypeString;
};
function consoleProcessor(messages, options, data) {
    const tabLevel = data.level || 0;
    const levelPadding = '  '.repeat(Math.max(0, tabLevel - 1));
    const padding = constants_1.default.PADDING.LOG + levelPadding;
    let output = '';
    if (data.consoleTitle) {
        output += ' '.repeat(4) + levelPadding + chalk_1.default.gray(data.consoleTitle) + '\n';
    }
    messages.forEach(({ type, message, severity, timeString }) => {
        let processedMessage = message;
        let { color, icon, trim } = TYPE_COMPUTE[type](options);
        trim = trim || options.defaultTrimLength || 800;
        if (severity === constants_1.default.SEVERITY.ERROR) {
            color = 'red';
            icon = LOG_SYMBOLS.error;
        }
        else if (severity === constants_1.default.SEVERITY.WARNING) {
            color = 'yellow';
            icon = LOG_SYMBOLS.warning;
        }
        if (message.length > trim) {
            processedMessage = message.substring(0, trim) + ' ...';
        }
        if (timeString) {
            output += chalk_1.default.gray(`${padding}Time: ${timeString}`) + '\n';
        }
        output += getTypeString(type, icon, color, padding) + ' ' + processedMessage.replace(/\n/g, '\n' + padding) + '\n';
    });
    if (messages.length !== 0 && !data.continuous) {
        console.log(output + '\n');
    }
    else if (output !== '') {
        console.log(output.substring(-1));
    }
}
exports.default = consoleProcessor;
