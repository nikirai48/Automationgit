import LogCollectControlBase from './LogCollectControlBase';
import LogCollectorState from "./LogCollectorState";
import type { ExtendedSupportOptions } from "../installLogsCollector.types";
import type { MessageData } from "../types";
/**
 * Collects and dispatches all logs from all tests and hooks.
 */
export default class LogCollectControlExtended extends LogCollectControlBase {
    protected collectorState: LogCollectorState;
    protected config: ExtendedSupportOptions;
    constructor(collectorState: LogCollectorState, config: ExtendedSupportOptions);
    register(): void;
    triggerSendTask(buildDataMessage: () => MessageData, noQueue: boolean, wait: number): void;
    registerState(): void;
    registerBeforeAllHooks(): void;
    registerAfterAllHooks(): void;
    registerTests(): void;
    registerLogToFiles(): void;
    debounceNextMochaSuite(promise: Promise<any>): void;
    registerCypressBeforeMochaHooksSealEvent(): void;
    prependBeforeAllHookInAllSuites(rootSuites: any, hookCallback: (this: any) => void): void;
    printPassingMochaTestTitle(test: any): void;
    preventNextMochaPassEmit(): void;
    debugLog(message: any): void;
}
